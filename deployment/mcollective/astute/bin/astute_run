#!/usr/bin/env ruby

require 'rubygems'
require 'astute'
require 'yaml'

def puppet_consecutive_call(orchestrator, context, nodes)
  for node in nodes do
    orchestrator.deploy_piece(context, [node], false)
  end
end

def puppet_parralel_call(orchestrator, context, nodes)
  orchestrator.deploy_piece(context, nodes, false)
end

class Context
  attr_accessor :task_id, :reporter

  def initialize(task_id, reporter)
    @task_id = task_id
    @reporter = reporter
  end
end

class ConsoleReporter
  def report(msg)
    p msg
  end
end

reporter = ConsoleReporter.new

task_id = `uuidgen`.strip
orchestrator = Astute::Orchestrator.new
context = Context.new(task_id, reporter)

# load nodes structure from yaml 
nodes_raw = YAML::load( File.open( (ARGV.length>0) ? (ARGV[0]) : "nodes.yaml" ) )
nodes = Array.new(nodes_raw.size - 1, Hash.new)
indx = 0
nodes_raw.each do |key, value|
  if key != 'use_case'
    nodes[indx] = value
    nodes[indx]['uid'] = key
    indx = indx + 1
  end
end

ctrl_nodes = nodes.select {|n| n['role'] == 'controller'}
compute_nodes = nodes.select {|n| n['role'] == 'compute'}

if nodes_raw['use_case'] == "minimal" or
    nodes_raw['use_case'] == "simple"  
  puppet_consecutive_call(orchestrator, context, ctrl_nodes)
  puppet_parallel_call(orchestrator, context, compute_nodes)
elsif nodes_raw['use_case'] == "compact"
  puppet_consecutive_call(orchestrator, context, [ctrl_nodes[0]])
  puppet_parralel_call(orchestrator, context, ctrl_nodes[1..2])
  puppet_parallel_call(orchestrator, context, ctrl_nodes)
  puppet_consecutive_call(orchestrator, context, [ctrl_nodes[0]])
  puppet_parralel_call(orchestrator, context, ctrl_nodes[1..2] + compute_nodes)
elsif nodes_raw['use_case'] == "full"
  storage_nodes = nodes.select {|n| n['role'] == 'storage'}
  proxy_nodes = nodes.select {|n| n['role'] == 'proxy'}
  puppet_consecutive_call(orchestrator, context, [ctrl_nodes[0]])
  puppet_parralel_call(orchestrator, context, [ctrl_nodes[1]])
  puppet_parallel_call(orchestrator, context, compute_nodes)
  puppet_parallel_call(orchestrator, context, storage_nodes)
  puppet_parallel_call(orchestrator, context, storage_nodes)
  puppet_parallel_call(orchestrator, context, [proxy_nodes[0]])
  puppet_parallel_call(orchestrator, context, storage_nodes)
  puppet_parallel_call(orchestrator, context, [proxy_nodes[1]])
else
  puts "Use case " + nodes_raw['use_case'] + " is not supported!"
end