#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
begin
  require 'astute'
rescue LoadError
  require 'rubygems'
  require 'astute'
end

#---------- SETTINGS -----------
$retries = 2
$ignore_failure = false
task_id = `uuidgen`.strip
log_parser = Astute::LogParser::NoParsing.new
logger_output = STDOUT
#--------------------------------

def puppet_consecutive_call(context, nodes)
  nodes = [nodes] if not nodes.is_a?(Array)
  Astute.logger.info "#{context.task_id}: Starting consecutive deployment."
  for node in nodes do
    Astute::PuppetdDeployer.deploy(context, [node], $retries, $ignore_failure)
  end
  nodes_roles = nodes.map { |n| { n['uid'] => n['role'] } }
  Astute.logger.info "#{context.task_id}: Finished deployment of nodes => roles: #{nodes_roles.inspect}"
end

def puppet_parallel_call(context, nodes)
  nodes = [nodes] if not nodes.is_a?(Array)
  Astute.logger.info "#{context.task_id}: Starting parallel deployment."
  Astute::PuppetdDeployer.deploy(context, nodes, $retries, $ignore_failure)
  nodes_roles = nodes.map { |n| { n['uid'] => n['role'] } }
  Astute.logger.info "#{context.task_id}: Finished deployment of nodes => roles: #{nodes_roles.inspect}"
end

class ConsoleReporter
  def report(msg)
    p msg
  end
end

opts = {}
optparse = OptionParser.new do |o|
  o.banner = "Usage: bin/astute -f FILENAME"

  o.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    opts[:verbose] = v
  end

  o.on("-f FILENAME", "Environment in YAML format. Samples are in examples directory.") do |f|
    opts[:filename] = f
  end

  o.on("-h") { puts o; exit }
end
optparse.parse!(ARGV)

if opts[:filename].nil?
  puts optparse
  exit
end

Astute.logger = Logger.new(logger_output) if opts[:verbose]
reporter = ConsoleReporter.new
proxy_reporter = Astute::ProxyReporter.new(reporter)
context = Astute::Context.new(task_id, proxy_reporter, log_parser)

# make list of nodes that respond to ping
pinged_nodes_list = []
IO.popen('mco ping').each do |line|
  if /time=/.match(line) # in 'mco ping' output only lines with 'time=' hold node names
    pinged_nodes_list += [/^[^ ]*/.match(line).to_s]
  end
end

# load nodes structure from yaml 
nodes_raw = YAML.load_file( opts[:filename] )
nodes = Array.new
domain_name = ''

nodes_raw.each do |key, value|
  domain_name = value if key =='domain_name'
end

nodes_raw.each do |key, value|
  next if (key == 'use_case') or (key =='domain_name')
  
  if /^\/.*\/$/.match(key) # if name stats and ends with '/' then it's regexp
    name_regexp = Regexp.new(key.slice(1..-2))
    name_with_domain_regexp = Regexp.new(key.slice(1..-2) + '.' + domain_name)
    pinged_nodes_list.each do |name|
      if name_regexp.match(name) or name_with_domain_regexp.match(name)
        hash_element = value.clone
        hash_element['uid'] = name
        nodes += [hash_element]
      end
    end
  else
    if pinged_nodes_list.include? key
      hash_element = value.clone
      hash_element['uid'] = key
      nodes += [hash_element]
    elsif pinged_nodes_list.include?(key + '.' + domain_name)
    # check if we can find this name after appending domain name
      hash_element = value.clone
      hash_element['uid'] = key + '.' + domain_name
      nodes += [hash_element]
    else # coudn't ping this node or wrong name
      raise "Node " + key + " not found!"
    end
  end
end

ctrl_nodes = nodes.select {|n| n['role'] == 'controller'}
ctrl_nodes = ctrl_nodes.sort{|x,y| x['uid'] <=> y['uid']}
compute_nodes = nodes.select {|n| n['role'] == 'compute'}
compute_nodes = compute_nodes.sort{|x,y| x['uid'] <=> y['uid']}

if nodes_raw['use_case'] == "minimal" or
    nodes_raw['use_case'] == "simple"  
  puppet_consecutive_call(context, ctrl_nodes)
  puppet_parallel_call(context, compute_nodes)
elsif nodes_raw['use_case'] == "compact"
  puppet_consecutive_call(context, ctrl_nodes[0])
  puppet_parallel_call(context, ctrl_nodes[1..2])
  puppet_parallel_call(context, ctrl_nodes)
  puppet_consecutive_call(context, ctrl_nodes[0])
  puppet_parallel_call(context, ctrl_nodes[1..2] + compute_nodes)
elsif nodes_raw['use_case'] == "full"
  storage_nodes = nodes.select {|n| n['role'] == 'storage'}
  storage_nodes = storage_nodes.sort{|x,y| x['uid'] <=> y['uid']}
  proxy_nodes = nodes.select {|n| n['role'] == 'proxy'}
  proxy_nodes = proxy_nodes.sort{|x,y| x['uid'] <=> y['uid']}
  puppet_consecutive_call(context, ctrl_nodes[0])
  puppet_parallel_call(context, ctrl_nodes[1])
  puppet_parallel_call(context, compute_nodes)
  puppet_parallel_call(context, storage_nodes)
  puppet_parallel_call(context, storage_nodes)
  puppet_parallel_call(context, proxy_nodes[0])
  puppet_parallel_call(context, storage_nodes)
  puppet_parallel_call(context, proxy_nodes[1])
else
  puts "Use case " + nodes_raw['use_case'] + " is not supported!"
end