#!/usr/bin/env ruby

require 'rubygems'
require 'astute'
require 'yaml'

class Context
  attr_accessor :task_id, :reporter

  def initialize(task_id, reporter)
    @task_id = task_id
    @reporter = reporter
  end
end

class ConsoleReporter
  def report(msg)
    p msg
  end
end

reporter = ConsoleReporter.new

task_id = `uuidgen`.strip
orchestrator = Astute::Orchestrator.new
context = Context.new(task_id, reporter)

# load nodes structure from yaml 
nodes_raw = YAML::load( File.open( (ARGV.length>0) ? (ARGV[0]) : "nodes.yaml" ) )
nodes = Array.new(nodes_raw.size, Hash.new)
indx = 0
nodes_raw.each do |key, value|
  if key != 'use_case'
    nodes[indx] = value
    nodes[indx]['uid'] = key
    indx = indx + 1
  end
end

if nodes_raw['use_case'] == "minimal" or
    nodes_raw['use_case'] == "simple"
  ctrl_nodes = nodes.select {|n| n['role'] == 'controller'}
  for node in ctrl_nodes do
    orchestrator.deploy_piece(context, node, false)
  end
  compute_nodes = nodes.select {|n| n['role'] == 'compute'}
  orchestrator.deploy_piece(context, compute_nodes, false)
elsif nodes_raw['use_case'] == "compact"
  print "TODO - compact use case"
elsif nodes_raw['use_case'] == "full"
  print "TODO - full use case"
else
  puts "Use case " + nodes_raw['use_case'] + " is not supported!"
end